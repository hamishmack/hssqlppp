{-


= basic select statements

This is a bit of a mess, will be rewritten with a proper literate
flavour once all the different bits are type checking ok, which should
make it much more readable.

-}

SEM Statement
    | QueryStatement
        loc.tpe = Right $ Pseudo Void
        loc.statementType =
            do
            pt <- sequence $ getPlaceholderTypes @ex.annotatedTree
            st <- @ex.uType
            return (pt
                   ,case st of
                      [(_,(Pseudo Void))] -> []
                      t -> t)
        loc.backTree = QueryStatement @ann @ex.annotatedTree
        loc.catUpdates = []

SEM QueryExpr
    | Values Select CombineQueryExpr WithQueryExpr
        loc.tpe : Et
        lhs.annotatedTree = setTypeAddErrors @loc.tpe @loc.backTree

{-

================================================================================

Type checking select expressions

The main issue is the complicated flow of identifier bindings through the
various parts. This is the rough order in which this happens:

with
from
where
groupby
having
select
combine
orderby
limit

if a type error occurs, you want to give up on any following stages,
rather than create loads of type errors (maybe this could be refined
more).

The select list produces the final type which the selectexpression has.

inside the from, if you have any join expressions we need to pass the types
from the joined trefs to the join expressions.

So, the basic plan is to propagate the iden bindings in the cat attribute
as elsewhere, and also pass along a flag to say whether the previous stage
type checked or not, so you can bail if it has failed.

alternative idea: explore transforming the ast for a select expression into
something using relational algebra-like operations - can then follow the flow
of ids easily. The problem might be with updating the annotations in the original
tree though.

== cat passing current bodge

cat flow:
current simple version:
from tref -> select list
          -> where

(so you take the identifiers and types from the tref part, and send
them into the selectlist and where parts)

full order of identifier passing:
   1. from
   2. where
   3. group by
   4. having
   5. select


group by notes, from the pg manual:
group by expressions can be an input column name, or the name or
ordinal number of an output column (SELECT list item), or an arbitrary
expression formed from input-column values. In case of ambiguity, a
GROUP BY name will be interpreted as an input-column name rather than
an output column name.

For now, just send the input columns in as identifiers
-}

SEM QueryExpr
    | Select
         {-loc.newLib = case foldM (flip $ lbUpdate @lhs.cat) @lhs.lib @selTref.libUpdates of
                        Left x -> error $ "selectexpression-select-loc.newlib " ++ show x -- @lhs.cat
                        Right e -> e-}
         loc.newLib = @selTref.newLib2
         selSelectList.lib = @loc.newLib
         -- add for correlated subquery support
         selWhere.lib = joinBindings @loc.newLib @lhs.csql
         selHaving.lib = joinBindings @loc.newLib @lhs.csql
         selGroupBy.lib = @loc.newLib
         -- have to add the select list columns aliases to the order by local bindings
         -- since these can be referenced in an order by. TODO: add restriction
         -- for the select list identifiers, see 7.5. Sorting Rows in pg 9.0 manual
         loc.slTypes : LocalBindings
         loc.slTypes = createLocalBindings $ Just [("",@selSelectList.listType)]
         selOrderBy.lib = joinBindings @loc.slTypes @loc.newLib

ATTR QueryExpr [||libUpdates : {[LocalBindingsUpdate]}
                  uType : {Maybe [(String,Type)]}]
-- correlated subqueries
ATTR QueryExpr [csql : LocalBindings||]

SEM InList
    | InQueryExpr sel.csql = emptyBindings
SEM Statement
    | CreateTableAs expr.csql = emptyBindings
    | CreateView expr.csql = emptyBindings
    | ForQueryStatement sel.csql = emptyBindings
    | Insert insData.csql = emptyBindings
    | QueryStatement ex.csql = emptyBindings
    | ReturnQuery sel.csql = emptyBindings
SEM TableRef
    | SubTref sel.csql = emptyBindings
SEM WithQuery
    | WithQuery ex.csql = emptyBindings

------------------------------------

SEM Statement
    | QueryStatement
        loc.libUpdates = @ex.libUpdates

SEM QueryExpr
    | Values CombineQueryExpr
        lhs.libUpdates = []
    | Select
        lhs.libUpdates = @selSelectList.libUpdates
    | WithQueryExpr
        lhs.libUpdates = @ex.libUpdates


SEM QueryExpr
    | Values
        loc.tpe = typeCheckValuesExpr
                              @lhs.cat
                              @vll.uType
        loc.backTree = Values @ann @vll.annotatedTree
    | Select
        loc.tpe =
            Right $ SetOfType $ CompositeType $ fromMaybe [] $ liftList  @selSelectList.listType
        loc.backTree = Select @ann
                              @selDistinct
                              @selSelectList.annotatedTree
                              @selTref.annotatedTree
                              @selWhere.annotatedTree
                              @selGroupBy.annotatedTree
                              @selHaving.annotatedTree
                              @selOrderBy.annotatedTree
                              @selFor
                              @selLimit.annotatedTree
                              @selOffset.annotatedTree
    | CombineQueryExpr
        loc.tpe =
          do
          sel1t <- lmt ((SetOfType . CompositeType) <$> @sel1.uType)
          sel2t <- lmt ((SetOfType . CompositeType) <$> @sel2.uType)
          typeCheckCombineSelect @lhs.cat sel1t sel2t

        loc.backTree = CombineQueryExpr @ann @ctype
                                     @sel1.annotatedTree
                                     @sel2.annotatedTree
    | WithQueryExpr
        loc.tpe = lmt ((SetOfType . CompositeType) <$> @ex.uType)
        loc.backTree = WithQueryExpr @ann @withs.annotatedTree @ex.annotatedTree
        ex.cat = @withs.producedCat
        withs.catUpdates = []

SEM QueryExpr
    | Values CombineQueryExpr WithQueryExpr Select
        lhs.uType = etmt (@loc.tpe >>= unwrapSetOfComposite)

{

typeCheckValuesExpr :: Catalog -> [[Maybe Type]] -> Either [TypeError] Type
typeCheckValuesExpr cat rowsTs = do
        rts <- lmt $ allJust $ map allJust rowsTs
        let colNames = zipWith (++)
                           (repeat "column")
                           (map show [1..length $ head rowsTs])
        unionRelTypes cat rts colNames


typeCheckCombineSelect :: Catalog -> Type -> Type -> Either [TypeError] Type
typeCheckCombineSelect cat v1 v2 = do
    u1 <- unwrapSetOfComposite v1
    let colNames = map fst u1
    u2 <- unwrapSetOfComposite v2
    let colTypes1 = map snd u1
    let colTypes2 = map snd u2
    unionRelTypes cat [colTypes1,colTypes2] colNames

unionRelTypes :: Catalog -> [[Type]] -> [String] -> Either [TypeError] Type
unionRelTypes cat rowsTs colNames =
  let lengths = map length rowsTs
  in case () of
             _ | null rowsTs ->
                   Left [NoRowsGivenForValues]
               | not (all (==head lengths) lengths) ->
                   Left [ValuesListsMustBeSameLength]
               | otherwise ->
                   --i don't think this propagates all the errors, just the first set
                   mapM (resolveResultSetType cat) (transpose rowsTs) >>=
                     (return . SetOfType . CompositeType . zip colNames)

}
{-
with queries:

reuse the catalog to store the individual with queries as views, so it
works as if we're transforming

with  a as select_a
     ,b as select_b
     ...
select_final

to

create view a as select_a
create view b as select_b
...
select_final

this is slightly hacky - the temporary view definitions should really
live in the local identifier bindings rather than the catalog, but
does the job without having to alter the local identifier bindings
types and functions.

-}

ATTR WithQuery [||catUpdates : {[CatalogUpdate]}]
ATTR WithQueryList [catUpdates : {[CatalogUpdate]}||]

--producedcat is used to pass the final updated cat out
ATTR WithQueryList [|| producedCat : Catalog]

SEM WithQueryList
    | Cons Nil
        --newcat is the catalog passed into the head statement
        --updated with any catalog changes that that statement has made
        loc.newCat = fromRight @lhs.cat $ updateCatalog @lhs.cat @lhs.catUpdates
    | Cons
        hd.cat = @loc.newCat
        tl.cat = @loc.newCat
        --produced cat is used to chain the final updated catalog from the last
        --element of the list and pass it back up the list so in can be pushed up
        -- to the root element and sent out from there
        lhs.producedCat = @tl.producedCat
        --this is probably a bit inefficient: it creates a new catalog from scratch
        --on each statement instead of chaining on the last updated cat
        tl.catUpdates = @hd.catUpdates
    | Nil
        lhs.producedCat = @loc.newCat

SEM WithQuery
    | WithQuery
        loc.tpe = Right $ Pseudo Void
        loc.backTree = WithQuery @ann @name @colAliases @ex.annotatedTree
        loc.attrs = maybe [] id $ @ex.uType --TODO: error ignored
        loc.catUpdates = [CatCreateView (ncStr @name) @loc.attrs]
        loc.statementType = Nothing



INCLUDE "TypeChecking/QueryExprs/TableRefs.ag"

INCLUDE "TypeChecking/QueryExprs/SelectLists.ag"
