{-

Type checking tablerefs:

Want to produce a list of identifier lookups for the rest of the query
expression to use.

Simple tablerefs, subselect tablerefs and function table refs are
relatively straight forward - pretty much you just have to lookup the
table, function or get the type info from the sub select and plug it
in. The errors are unrecognised table/view/function and wrong number
of cols in alias.

The join tablerefs are where the mess comes in. For joins, the
produced list of identifier lookups gets slightly complicated:

without a table alias on the join, you get a mixture of qualifying
names

natural and using joins reorder the columns and eliminate duplicates.

The complications in star expansion are handled in the fixup
identifiers stage so this code doesn't have to worry about
this. Common identifers from natural/using joins are qualified with
the name of the first table.

the following additional type checks are needed in a join tableref:
for using joins - check both tables have the named identifiers
for using and natural joins, check the join columns from each table
have compatible types
pass in environments to the onexpr


From the fixup identifiers, have:

all recognised identifiers are qualified already, but ambiguous
identifers are left unqualified - need to pick this up using the
correct error

all trefs have explicit aliases, except joins with a mixture of
qualifying names
-}

-- lib update contains the updated ids bindings coming out of the
-- tableref part of a select expression. These updates aren't used for
-- chaining these things for nested table refs (in join statements) -
-- uses attributes for that

ATTR TableRef TableRefList [|| libUpdates: {[LocalBindingsUpdate]}]

-- set the annotations, just need to pick up any type errors whilst
-- calculating the new bindings
SEM TableRef
    | SubTref Tref FunTref JoinTref
        lhs.annotatedTree = addTypeErrors @loc.errs @loc.backTree

SEM TableRefList
    | Nil
        lhs.libUpdates = []
    | Cons
        lhs.libUpdates = @hd.libUpdates -- todo, combine properly


{-
MOST OF THIS CODE IS UNUSED. the local bindings stuff is due a big rewrite.
-}

SEM TableRef
    | SubTref
{-
subtref - pull the type of the select expression out (which will be a
          setof composite then the lbupdate is these fields qualified
          with the tref's alias
-}

        loc.errs = case @loc.selectAttrs of
                           Left e -> e
                           Right _ -> []
        loc.selectAttrs : {Either [TypeError] [(String,Type)]}
        loc.selectAttrs = lmt @sel.uType
        lhs.libUpdates = [LBTref "sub query" (getAlias "" @alias.originalTree) --"" should be error
                                         (fromRight [] @loc.selectAttrs) []]

    | Tref
{-
tref - just a name of a table or view, just need to retrieve the fields from the catalog

-}
        loc.errs = []
        lhs.libUpdates = maybe [] id $ do
                         let n = getTName @tbl.annotatedTree
                         (pu,pr) <- @tbl.tbUType
                         return [LBTref ("tref: " ++ n)
                                   (getAlias n @alias.originalTree)
                                   pu
                                   pr]


    | FunTref
{-

we rely on the funIdens function below to get the correlation name an
column names and types - see that function for how this works

-}
        loc.errs = case @eqfunIdens of
                     Left e -> e
                     Right _ -> []


        loc.eqfunIdens : {Either [TypeError] (String,[(String,Type)])}
        loc.eqfunIdens = funIdens @lhs.cat @alias.originalTree @fn.annotatedTree @fn.uType
        lhs.libUpdates = [LBTref "fn"
                                         (fst @loc.qfunIdens)
                                         (snd @loc.qfunIdens)
                                         []]
        loc.qfunIdens = fromRight ("",[]) @loc.eqfunIdens
    | JoinTref
{-
join - most of the hard work is done in local bindings
-}
        loc.errs = fromLeft [] @loc.newLib
                   ++ @loc.joinErrors
        lhs.libUpdates = if @loc.joinErrors == []
                         then @loc.libUpdates
                         else []
                   --bit hacky, you want any errors from the join
                   -- to be added here, instead of upstream
        loc.joinErrors = fromLeft [] (foldM (flip $ lbUpdate @lhs.cat) @lhs.lib @loc.libUpdates)
        loc.libUpdates =
            case (@tbl.libUpdates, @tbl1.libUpdates) of
              ([u1], [u2]) -> [LBJoinTref "join" u1 u2 jids
                                              (case @alias.originalTree of
                                                       NoAlias _ -> Nothing
                                                       TableAlias _ t -> Just $ ncStr t
                                                       FullAlias _ t _ -> Just $ ncStr t)]
              _ -> []
            where
              jids = case (@nat, @onExpr.originalTree) of
                          (Natural, _) -> Left ()
                          (_,Just (JoinUsing _ s)) -> Right $ map ncStr s
                          _ -> Right []
        loc.newLib : {Either [TypeError] LocalBindings}
        loc.newLib = case (@tbl.libUpdates, @tbl1.libUpdates) of
                       ([u1],[u2]) -> lbUpdate @lhs.cat
                                        (LBJoinTref "join" u1 u2 (Right []) Nothing) @lhs.lib
                       _ -> Right @lhs.lib
        --onExpr.lib = fromRight @lhs.lib @loc.newLib

{



{-
convert a function call into a [String,[(string,type)]] list for use
in a tableref context
first consideration is the alias: if there is an alias in the select,
e.g. select * from generate_series(1,2) x;  (alias is x)
we use that, otherwise you use the name of the function
second consideration is the attributes coming out, roughly speaking
we have to convert an arbitrary type to a relation type
if you have a relation valued function, we don't need to do anything
if you have a setof non composite, we lift the single type to an
attribute, using the function name for the attribute name
if you have a non setof, we lift the single type to an attribute and
then relation, using the function name for the attribute name
need to check to see what should happen with arrayof

-}

 -- @lhs.cat @alias.originalTree @fn.annotatedTree @fn.uType
-- should always get full alias

funIdens :: Catalog -> TableAlias -> ScalarExpr -> Maybe Type -> Either [TypeError] (String,[(String,Type)])
funIdens cat (FullAlias _ t cs) (FunCall _ fnName _) ft = do
   {-errorWhen (case fnVal of
                FunCall _ _ _ -> False
                _ -> True)
             [ContextError "FunCall"]
   let (FunCall _ fnName _) = fnVal
       cn = if alias /= ""
                           then alias
                           else fnName-}
   attrs <- do
     fnt <- lmt ft
     case fnt of
       SetOfType (NamedCompositeType t) -> do
          x <- catCompositePublicAttrs cat [] t
          let aliaslen = length cs
              gotlen = length x
          if aliaslen == gotlen
            then return $ zip cs $ map snd x
            else Left [WrongNumberOfAliasCols gotlen aliaslen]

       SetOfType x | [c] <- cs -> return [(c,x)]
                   | otherwise -> Left [WrongNumberOfAliasCols 1 $ length cs]
       x | [c] <- cs -> return [(c,x)]
         | otherwise -> Left [WrongNumberOfAliasCols 1 $ length cs]
   return (ncStr t, map (first ncStr) attrs)

getAlias :: String -> TableAlias -> String
getAlias def alias =
  case alias of
    NoAlias _ -> def
    TableAlias _ t -> ncStr t
    FullAlias _ t _ -> ncStr t

}

{-
-----------------------------------------------------------
new environment creation code
-}

ATTR TableRef TableRefList [|| newLib2 : LocalBindings]

SEM TableRefList
    | Nil
        lhs.newLib2 = createLocalBindings $ Just []
    | Cons
        lhs.newLib2 = joinBindings @hd.newLib2 @tl.newLib2

SEM TableRef
    | Tref
        lhs.newLib2 =
             createLocalBindings $ do
             let n = getTName @tbl.annotatedTree
             -- public and pg internal fields
             (pu,pr) <- @tbl.tbUType
             -- factor in alias
             let (n,cs) = case @alias.originalTree of
                            (FullAlias _ n cs) -> (ncStr n,map ncStr cs)
                            _ -> (n, []) --todo:fix, shouldn't ever not have full alias but does
             return [(n,zip cs $ map (Just . snd) pu)
                    ,(n,map (second Just) pr)]
    | JoinTref
        loc.newLib2 =
             let t0t :: [(String,Maybe Type)]
                 t0t = getUnqualifiedBindings @tbl.newLib2
                 t1t = getUnqualifiedBindings @tbl1.newLib2
             -- missing the internal fields
             in case @alias.originalTree of
               (FullAlias _ n cs) ->
                   -- not sure if this is correct
                   createLocalBindings $ Just [(ncStr n,zip (map ncStr cs) $ map snd (t0t ++ t1t))]
               (TableAlias _ n) ->
                   createLocalBindings $ Just [(ncStr n, t0t ++ t1t)]
               NoAlias _ ->
                   joinBindings @tbl.newLib2 @tbl1.newLib2
        lhs.newLib2 = @loc.newLib2
        onExpr.lib = @loc.newLib2

    | SubTref
        lhs.newLib2 =
             createLocalBindings $ do
             pu <- @sel.uType
             -- factor in alias
             let (n,cs) = case @alias.originalTree of
                            (FullAlias _ n cs) -> (ncStr n,map ncStr cs)
                            _ -> (n, []) --todo:fix, shouldn't ever not have full alias but does
             return [(n,zip cs $ map (Just . snd) pu)]
    | FunTref
        lhs.newLib2 =
          createLocalBindings $ do
            -- fixme: ignoring errors?
          (t,cs) <- etmt $ funIdens @lhs.cat @alias.originalTree @fn.annotatedTree @fn.uType
          return [(t,map (second Just) cs)]

-------------------------------------------------------------

-- backtrees

SEM TableRef
    | SubTref
        loc.backTree = SubTref @ann @sel.annotatedTree @alias.annotatedTree
    | Tref
        loc.backTree = Tref @ann @tbl.tbAnnotatedTree @alias.annotatedTree @hints
    | FunTref
        loc.backTree = FunTref @ann @fn.annotatedTree @alias.annotatedTree
    | JoinTref
        loc.backTree = JoinTref @ann
                                  @tbl.annotatedTree
                                  @nat
                                  @joinType
                                  @tbl1.annotatedTree
                                  @onExpr.annotatedTree
                                  @alias.annotatedTree
                                  @hints


ATTR TableAlias [expectedNumCols : {Maybe Int} ||]

SEM TableRef
    | Tref
        alias.expectedNumCols =
             do
             let n = getTName @tbl.annotatedTree
             (pu,_) <- @tbl.tbUType
             return $ length pu
    | SubTref JoinTref FunTref
        alias.expectedNumCols = Nothing


SEM TableAlias
    | FullAlias TableAlias NoAlias
        lhs.annotatedTree = addTypeErrors @loc.errs @loc.backTree
    | FullAlias
        loc.errs = case @lhs.expectedNumCols of
                         Nothing -> []
                         Just n -> if n == length @cols
                                   then []
                                   else [WrongNumberOfAliasCols n $ length @cols]
        loc.backTree = FullAlias @ann @tb @cols
    | TableAlias loc.backTree = TableAlias @ann @tb
                 loc.errs = []
    | NoAlias loc.backTree = NoAlias @ann
              loc.errs = []
